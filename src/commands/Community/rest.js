const { ActionRowBuilder, ButtonBuilder, ButtonStyle, SlashCommandBuilder } = require('discord.js');

const { EmbedBuilder } = require('discord.js')

module.exports = {
    data: new SlashCommandBuilder()
        .setName('rest')
        .setDescription('–ß—Ç–æ —Ç–æ —Ç–∏–ø–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞'),

        async execute(interaction, client) {

            const grysha = new ButtonBuilder()
			.setCustomId('grysha')
			.setLabel('–ì—Ä—É—à–∞')
			.setStyle(ButtonStyle.Success)
            .setEmoji('üçê');

            const apple = new ButtonBuilder()
			.setCustomId('apple')
			.setLabel('–Ø–±–ª–æ–∫–æ')
			.setStyle(ButtonStyle.Success)
            .setEmoji('üçé');
            
            const banana = new ButtonBuilder()
			.setCustomId('banana')
			.setLabel('–ë–∞–Ω–∞–Ω')
			.setStyle(ButtonStyle.Success)
            .setEmoji('üçå');
            const back = new ButtonBuilder()
			.setCustomId('back')
			.setLabel('–ù–∞–∑–∞–¥')
			.setStyle(ButtonStyle.Secondary)
            .setEmoji('üîô');

            const row = new ActionRowBuilder()
			.addComponents(grysha, apple ,banana);
            const row2 = new ActionRowBuilder()
			.addComponents(back);


            const response = await interaction.reply({
                content: `üè™ –í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä—è–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä: \n\n1. üçê –ì—Ä—É—à–∞\n2. üçé –Ø–±–ª–æ–∫–æ\n3. üçå –ë–∞–Ω–∞–Ω`,
                components: [row],
            })
            const collectorFilter = i => i.user.id === interaction.user.id;
            try {
                const collector = response.createMessageComponentCollector({ filter: collectorFilter });
                collector.on("collect", async (confirmation) => {
                    if (confirmation.customId === 'grysha') {
                        await confirmation.update({ content: `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–∞–∑–∞–ª–∏ –≥—Ä—É—à–∏.`, components: [row2] });
                    } else if (confirmation.customId === 'apple') {
                        await confirmation.update({ content: '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–∞–∑–∞–ª–∏ —è–±–ª–æ–∫–æ', components: [row2] });
                    } else if (confirmation.customId === 'banana') {
                        await confirmation.update({ content: '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–∞–∑–∞–ª–∏ –±–∞–Ω–∞–Ω', components: [row2] });
                    }
                    if (confirmation.customId === 'back') {
                        await confirmation.update({ content: 'üè™ –í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä: \n\n1. üçê –ì—Ä—É—à–∞\n2. üçé –Ø–±–ª–æ–∫–æ\n3. üçå –ë–∞–Ω–∞–Ω', components: [row] });
                    }
                })
            } catch (e) {
             console.log(e)
                await interaction.editReply({ content: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã, –æ—Ç–º–µ–Ω–∞', components: [row2] });
            }
        

            





                    }
}


