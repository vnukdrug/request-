const { Client, GatewayIntentBits, EmbedBuilder, Events, MessageManager, Portials, PermissionsBitField, Embed, Collection, ChannelType, Permissions, GuildMember, GuildHubType, AuditLogEvent, ButtonBuilder, ActionRowBuilder, DMChannel, InteractionCollector, Partials, ButtonStyle, ActivityType, Intents, ModalBuilder, TextInputBuilder, TextInputStyle } = require(`discord.js`);
const fs = require('fs');
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent, GatewayIntentBits.GuildMembers, GatewayIntentBits.GuildVoiceStates], partials: Object.values(Partials), }); 
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

client.commands = new Collection();

require('dotenv').config();

const functions = fs.readdirSync("./src/functions").filter(file => file.endsWith(".js"));
const eventFiles = fs.readdirSync("./src/events").filter(file => file.endsWith(".js"));
const commandFolders = fs.readdirSync("./src/commands");

for (const file of functions) {
      require(`./functions/${file}`)(client);
    }

client.handleEvents(eventFiles, "./src/events");
client.handleCommands(commandFolders, "./src/commands");
client.login(process.env.token);

const Requests = {}

client.on('interactionCreate', async interaction => {
    if (!interaction.isButton()) return;

    const { customId } = interaction;


    if (customId === 'zapros') {

        await interaction.deferReply({ fetchReply: true, ephemeral: true })

        const tagPattern = /\[(.*?)\]/;
        const match = interaction.member.displayName.match(tagPattern);
        if (!match) {
            await interaction.editReply({ content: '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–≥ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä [LSPD].', ephemeral: true });
            return;
        }
        const tag = match[1];
        const role = await prisma.roles.findFirst({
            where: {
                tag: tag
            }
        });
        const roleId = role.idRole;

        if (interaction.member.roles.cache.has(roleId)) {
            await interaction.editReply({ content: `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å <@&${roleId}>, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.`, ephemeral: true });
            return;
        }

        const allRoles = await prisma.roles.findMany();
        const userRoles = interaction.member.roles.cache.map(role => role.id);
        const hasAnyRole = allRoles.some(role => userRoles.includes(role.idRole));

        if (hasAnyRole) {
            await interaction.editReply({ content: `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–æ–ª—å, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –Ω–æ–≤—É—é —Ä–æ–ª—å.`, ephemeral: true });
            return;
        }
  
        if (!role) {
            await interaction.editReply({ content: `–£ –≤–∞—Å –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤", —á—Ç–æ-–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤.`, ephemeral: true });
            return;
        }

        const channel1 = await client.channels.fetch(process.env.channel);

        const messages = await channel1.messages.fetch({ limit: 100 });
        const userIdMention = `<@${interaction.user.id}>`; // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        const existingRequest = messages.find(m => 
            m.embeds.length > 0 && 
            m.embeds[0].fields.some(f => f.name === '–ê–∫–∫–∞—É–Ω—Ç' && f.value.includes(userIdMention))
        );
    
        if (existingRequest) {
            const requestTime = existingRequest.createdAt;
            const errorEmbed = new EmbedBuilder()
                .setColor('Red')
                .setTitle('–û—à–∏–±–∫–∞: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–æ–ª—å')
                .setDescription(`–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.`)
                .addFields(
                    { name: '–í—Ä–µ–º—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞', value: `${requestTime.toLocaleString('ru-RU')}`, inline: false }
                )
                .setTimestamp();
            await interaction.editReply({ embeds: [errorEmbed], ephemeral: true });
            return;
        }

        const accept = new ButtonBuilder()
            .setCustomId('accept')
            .setLabel('–ü—Ä–∏–Ω—è—Ç—å')
            .setEmoji('‚úÖ')
            .setStyle(ButtonStyle.Success)
        const cancel = new ButtonBuilder()
            .setCustomId('cancel')
            .setLabel('–û—Ç–∫–∞–∑–∞—Ç—å –≤ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏')
            .setEmoji('üõë')
            .setStyle(ButtonStyle.Danger)
        const request = new ButtonBuilder()
            .setCustomId('request')
            .setLabel('–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
            .setEmoji('ü´°')
            .setStyle(ButtonStyle.Secondary)
        const del = new ButtonBuilder()
            .setCustomId('del')
            .setLabel('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å')
            .setEmoji('üç∫')
            .setStyle(ButtonStyle.Primary)

        const rowButtons = new ActionRowBuilder().addComponents(accept, cancel)
        const rowButtons2 = new ActionRowBuilder().addComponents(request, del)
        
        const zaprosrole = new EmbedBuilder()
        .setColor(0x0099FF)
        .setTitle('Discord > –ó–∞–ø—Ä–æ—Å –æ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.')
        .addFields(
            { name: '–ê–∫–∫–∞—É–Ω—Ç', value: `${interaction.member}` },
            { name: '–ù–∏–∫–Ω–µ–π–º', value: `${interaction.member.displayName}` },
            { name: '–†–æ–ª—å –¥–ª—è –≤—ã–¥–∞—á–∏', value: `<@&${roleId}>`, inline: true }
        )
        const channel = await client.channels.fetch(process.env.channel);
        await channel.send({ embeds: [zaprosrole], components: [rowButtons, rowButtons2] });
  
        await interaction.editReply({ content: 'üì® –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', ephemeral: true });




    } else if (customId === 'forma') {
        await interaction.reply({ content: '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏, –≤–∞—à –Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ [—Ñ—Ä–∞–∫—Ü–∏—è] –í–∞—à_–ù–∏–∫ [—Ä–∞–Ω–≥].', ephemeral: true });
    } else if (customId === 'tegi') {
        const roles = await prisma.roles.findMany({
            select: {
                tag: true,
                idRole: true
            }
          });

          let messageContent = '';
          roles.forEach((role, index) => {
              messageContent += `${index + 1}. [${role.tag}] => <@&${role.idRole}>\n`;
          });

          const embed = new EmbedBuilder()
          .setColor('#ffa000')
          .setAuthor({ name: '–¢–µ–≥–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π', iconURL: interaction.guild.iconURL() })
          .setDescription(messageContent)
              await interaction.reply({ embeds: [embed], ephemeral: true });
    }
});


client.on('interactionCreate', async interaction => {
    if (!interaction.isButton()) return;

    const { customId } = interaction;

    switch (customId) {
        case 'accept':
            await interaction.message.delete()
            const embed = interaction.message.embeds[0];
            let accountIdField = embed.fields.find(field => field.name === '–ê–∫–∫–∞—É–Ω—Ç');
            let accountId = accountIdField.value.match(/<@(\d+)>/)[1];
            let roleIdField = embed.fields.find(field => field.name === '–†–æ–ª—å –¥–ª—è –≤—ã–¥–∞—á–∏');
            let roleId = roleIdField.value.match(/<@&(\d+)>/)[1];
            const role = await interaction.guild.roles.fetch(roleId);
            const roleName = role ? role.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å';
            await interaction.channel.send({ content: `\`[DEBUG] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É —Ä–æ–ª–∏ ${roleName} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \`<@${accountId}>\`(\` \`ID:\` ||${accountId}|| \`)\` \`–±—ã–ª —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –∏ –æ–¥–æ–±—Ä–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º \`${interaction.member}.` })
            const member = await interaction.guild.members.fetch(accountId);
            await member.roles.add(roleId);
            await member.send({ content: `[Payson] –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä ${interaction.member} –æ–¥–æ–±—Ä–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É —Ä–æ–ª–∏ **${roleName}**!`})
            break;
        case 'cancel':
            await interaction.message.delete()
            const embed2 = interaction.message.embeds[0];
            let accountIdField2 = embed2.fields.find(field => field.name === '–ê–∫–∫–∞—É–Ω—Ç');
            let accountId2 = accountIdField2.value.match(/<@(\d+)>/)[1];
            let roleIdField2 = embed2.fields.find(field => field.name === '–†–æ–ª—å –¥–ª—è –≤—ã–¥–∞—á–∏');
            let roleId2 = roleIdField2.value.match(/<@&(\d+)>/)[1];
            const role2 = await interaction.guild.roles.fetch(roleId2);
            const roleName2 = role2 ? role2.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å';
            await interaction.channel.send({ content: `\`[DEBUG] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É —Ä–æ–ª–∏ ${roleName2} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \`<@${accountId2}> \`(\` \`ID:\` ||${accountId2}|| \`)\` \`–±—ã–ª —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –∏ –æ—Ç–∫–∞–∑–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º \`${interaction.member}.` })
            const member2 = await interaction.guild.members.fetch(accountId2);
            await member2.send({ content: `[Payson] –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä ${interaction.member} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É —Ä–æ–ª–∏.\n–í–∞—à –Ω–∏–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: **${member2.displayName}**. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–æ—Ä–º—É –Ω–∏–∫–∞ –Ω–∞: **[—Ñ—Ä–∞–∫—Ü–∏—è] Nick_Name [—Ä–∞–Ω–≥]**`})
            break;
        case 'request':
            await interaction.message.delete()
            const embed3 = interaction.message.embeds[0];
            let accountIdField3 = embed3.fields.find(field => field.name === '–ê–∫–∫–∞—É–Ω—Ç');
            let accountId3 = accountIdField3.value.match(/<@(\d+)>/)[1];
            let roleIdField3 = embed3.fields.find(field => field.name === '–†–æ–ª—å –¥–ª—è –≤—ã–¥–∞—á–∏');
            let roleId3 = roleIdField3.value.match(/<@&(\d+)>/)[1];
            const role3 = await interaction.guild.roles.fetch(roleId3);
            const roleName3 = role3 ? role3.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å'; 
            await interaction.channel.send({ content: `\`[DEBUG] \`${interaction.member}\`, –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É \`<@${accountId3}>\`, —Å ID: \` ||${accountId3}||` })
            const member3 = await interaction.guild.members.fetch(accountId3);
            await member3.send({ content: `[Payson] –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä ${interaction.member} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É —Ä–æ–ª–∏.\n–í–∞—à –Ω–∏–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: **${member3.displayName}**`})
            break;
        case 'del':
            await interaction.message.delete()
            const embed4 = interaction.message.embeds[0];
            let accountIdField4 = embed4.fields.find(field => field.name === '–ê–∫–∫–∞—É–Ω—Ç');
            let accountId4 = accountIdField4.value.match(/<@(\d+)>/)[1];
            let roleIdField4 = embed4.fields.find(field => field.name === '–†–æ–ª—å –¥–ª—è –≤—ã–¥–∞—á–∏');
            let roleId4 = roleIdField4.value.match(/<@&(\d+)>/)[1];
            const role4 = await interaction.guild.roles.fetch(roleId4);
            const roleName4 = role4 ? role4.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å'; 
            await interaction.channel.send({ content: `\`[DEBUG] \`${interaction.member}\`, —É–¥–∞–ª–∏–ª –∑–∞–ø—Ä–æ—Å –æ—Ç \`<@${accountId4}>\`, —Å ID: \` ||${accountId4}||` })
            break;
    }
});


// –ê–Ω—Ç–∏-–∫—Ä–∞—à –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã, –Ω–µ —É–±–∏—Ä–∞–π—Ç–µ –∏–Ω–∞—á–µ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –±–æ—Ç –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–∞—Ç—å—Å—è.

process.on('unhandledRejection', async (reason, promise) => {
    console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', promise, 'reason:', reason);
});

process.on('uncaughtException', (err) => {
    console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
});

process.on('uncaughtExceptionMonitor', (err, origin) => {
    console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', err, origin);
});